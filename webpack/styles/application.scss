@import './globals';
@import '~normalize.css/normalize.css';

@import './buttons';
@import './header.scss';
@import './pages/about.scss';

* {
  box-sizing: border-box;
}

html {
  height: 100%;
}

body {
  height: 100%;
  min-height: 100%;
  display: flex;
  flex-direction: column;
  font-family: 'Gotham Rounded SSm A', 'Gotham Rounded SSm B';
  font-style: normal;
  font-weight: 500;
  background-color: #a6f3f7;
  // CSS multiple background images actually performs the worst
  // background-image: url('~images/debris.png'), url('~images/noise64.png'), url('~images/bgdotstrip.png'), radial-gradient(ellipse farthest-corner at 50% 45%, #a6f3f7 30%, #1ad4de 100%);
  // background-position: center top, 0 0, bottom, 0 0;
  // background-size: auto, auto, auto 50%, auto;
  // background-repeat: no-repeat, repeat, repeat-x, no-repeat;
  // background-blend-mode: color-burn, soft-light, multiply, normal;
}

body.overflow {
  overflow: hidden;
}

.notFooter {
  min-height: 100%;
  background : #a6f3f7;
  background: -moz-radial-gradient(center, ellipse cover, #a6f3f7 0%, #32d9e2 100%); /* FF3.6-15 */
  background: -webkit-radial-gradient(center, ellipse cover, #a6f3f7 0%,#32d9e2 100%); /* Chrome10-25,Safari5.1-6 */
  background: radial-gradient(ellipse at center, #a6f3f7 0%,#32d9e2 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#a6f3f7', endColorstr='#32d9e2',GradientType=1 ); /* IE6-9 fallback on horizontal gradient */
}

.ghost {
  transition: opacity .5s;
  opacity: 0;
  pointer-events: none;
}

.background {
  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  width: 100%;
  height: 100%;
  opacity: 0;
  display: none;

  // .whiteSpots {
  //   width: 100%;
  //   height: 100%;
  //   position: absolute;
  //   top: 0;
  //   opacity: 0.3;
  // }

  // .rings {
  //   width: 100%;
  //   height: 100%;
  //   position: absolute;
  //   top: 0;
  //   opacity: 0.6;
  // }
}

.content {
  flex: 1;
}

.footer {
  background-color: #fff;
  color: #838383;
  padding: 15px 12px;
  font-family: arial;

  @include desktop {
    padding: 13px 20px 7px;
  }

  .copyright {
    float: right;

    span {
      display: none;

      @include desktop {
        display: inline;
        font-size: 12px;
      }
    }

    .logoFritoLay {
      background: url('~images/logo-frito-lay.png') no-repeat;
      background-size: contain;
      width: 39px;
      height: 26px;
      display: inline-block;
      vertical-align: middle;
      margin-left: 10px;

      @include desktop {
        position: relative;
        top: -3px;
      }
    }
  }

  .share {
    float: left;
    width: 80%;
    margin-bottom: 12px;

    @include desktop {
      width: auto;
      margin-bottom: 0;
    }

    a {
      margin-right: 7px;
      width: 26px;
      height: 26px;
      display: inline-block;
      background: no-repeat;
      background-size: contain;

      &.facebook {
        background-image: url('~images/icon-facebook.png')
      }

      &.twitter {
        background-image: url('~images/icon-twitter.png')
      }
    }
  }

  ul {
    display: flex;
    flex-flow: wrap;
    padding-left: 0;
    width: 100%;
    margin: 0;

    @include desktop {
      width: auto;
    }

    li {
      list-style-type: none;
      margin: 0;
      width: 50%;

      @include desktop {
        width: auto;
        margin-left: 10px;
      }

      a {
        text-decoration: none;
        color: #838383;
        font-size: 12px;
        line-height: 2.2;
      }
    }
  }
}


/* FLEX MINI CSS FRAMEWORK
**
 * .flex vs .flex-container
 * .flex: Used when content determines the size of the container
 * .flex-container: Used when you want the container to fill 100% of the width of the parent container
 * 
 * Example: (TODO)
 * ```
 * <div class="flex"> </div>
 * <div class="flex-container"> </div>
 * ```
 */
.flex,
.flex-container {
  position: relative;
  display: flex;
}

.flex-container {
  width: 100%;
}

/**
 * Container Augment Classes: .row, .col, .wrap
 * Use these to modify your flex containers as you see fit and be able to toggle them on or off
 */

/**
 * .row
 * 
 * Example: (TODO)
 * ```
 * <div class="flex row"> </div>
 * <div class="flex-container row"> </div>
 * ```
 */

.flex.row,
.flex-container.row {
  flex-direction: row;
}

/**
 * .col
 * 
 * Example: (TODO)
 * ```
 * <div class="flex col"> </div>
 * <div class="flex-container col"> </div>
 * ```
 */

.flex.col,
.flex-container.col {
  flex-direction: column;
}

/**
 * .wrap
 * 
 * Example: (TODO)
 * ```
 * <div class="flex wrap"> </div>
 * <div class="flex-container wrap"> </div>
 * ```
 */

.flex.wrap,
.flex-container.wrap {
  flex-wrap: wrap;
}

/**
 * Container Align Classes: .align-*, * can be start, end, center, or stretch
 * Use these to explicitly set the `align-items` property to your container
 */

.flex.align-start,
.flex-container.align-start {
  align-items: flex-start;
}

.flex.align-end,
.flex-container.align-end {
  align-items: flex-end;
}

.flex.align-center,
.flex-container.align-center {
  align-items: center;
}

.flex.align-stretch,
.flex-container.align-stretch {
  align-items: stretch;
}

/**
 * Container Justify Classes: .justify-*, * can be start, end, center, around, or between
 * Use these to explicitly set the `justify-content` property to your container
 */

.flex.justify-start,
.flex-container.justify-start {
  justify-content: flex-start;
}

.flex.justify-end
.flex-container.justify-end {
  justify-content: flex-end;
}

.flex.justify-center,
.flex-container.justify-center {
  justify-content: center;
}

.flex.justify-around,
.flex-container.justify-around {
  justify-content: space-around;
}

.flex.justify-between,
.flex-container.justify-between {
  justify-content: space-between;
}

/**
 * Container Shorthand Align-Justify Classes
 * Use these to set both the `align-items` and `justify-content` properties at the same time.
 * Important: Align items always comes first then followed by Justify content after the hyphen.
 */

.flex.center-start,
.flex-container.center-start {
  align-items: center;
  justify-content: flex-start;
}

.flex.center-end,
.flex-container.center-end {
  align-items: center;
  justify-content: flex-end;
}

.flex.center-center,
.flex-container.center-center {
  align-items: center;
  justify-content: center;
}

.flex.center-around,
.flex-container.center-around {
  align-items: center;
  justify-content: space-around;
}

.flex.center-between,
.flex-container.center-between {
  align-items: center;
  justify-content: space-between;
}


.flex.stretch-start,
.flex-container.stretch-start {
  align-items: stretch;
  justify-content: flex-start;
}

.flex.stretch-end,
.flex-container.stretch-end {
  align-items: stretch;
  justify-content: flex-end;
}

.flex.stretch-center,
.flex-container.stretch-center {
  align-items: stretch;
  justify-content: center;
}

.flex.stretch-around,
.flex-container.stretch-around {
  align-items: stretch;
  justify-content: space-around;
}

.flex.stretch-between,
.flex-container.stretch-between {
  align-items: stretch;
  justify-content: space-between;
}


.flex.start-start,
.flex-container.start-start {
    align-items: flex-start;
    justify-content: flex-start;
}

.flex.start-end,
.flex-container.start-end {
    align-items: flex-start;
    justify-content: flex-end;
}

.flex.start-center,
.flex-container.start-center {
  align-items: flex-start;
  justify-content: center;
}

.flex.start-around,
.flex-container.start-around {
    align-items: flex-start;
    justify-content: space-around;
}

.flex.start-between,
.flex-container.start-between {
    align-items: flex-start;
    justify-content: space-between;
}


.flex.end-start,
.flex-container.end-start {
  align-items: flex-end;
  justify-content: flex-start;
}

.flex.end-end,
.flex-container.end-end {
  align-items: flex-end;
  justify-content: flex-end;
}

.flex.end-center,
.flex-container.end-center {
  align-items: flex-end;
  justify-content: center;
}

.flex.end-around,
.flex-container.end-around {
  align-items: flex-end;
  justify-content: space-around;    
}

.flex.end-between,
.flex-container.end-between {
  align-items: flex-end;
  justify-content: space-between;  
}